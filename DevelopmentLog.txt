Day 1:
Setup the project folder structure
did pip install composio and tried to import it. Got an AttributeError: module 'typing' has no attribute 'TypeAlias'. I was using python3.9 which didn't support typing.TypeAlias
Deleted the virtual env and created a new one in python 3.10

Major Friction Point:
    1. Testing Google Provider
    I was following the docs to test out the Google provider. I copied the pip installation commands as well as the code and added my own userId, api key.
    Got an error. ModuleNotFoundError: No module named 'composio_gemini'. In the docs, the pip installation line installs composio_google but the code was importing composio_gemini which I thought was a mistake so I replaced composio_gemini with composio_google in my code.
    Then I got the error ImportError: cannot import name 'GeminiProvider' from 'composio_google'. Did you mean 'GoogleProvider'. I went along and replaced the terms. 
    Then I got a google.genai.errors.ClientError: 400 INVALID_ARGUMENT

    I assumed that the pip install command was wrong and I ran pip install composio_gemini and reset the code back to how the docs said. This now worked. 
    Conclusion: The pip installation command in the Setup section of the Google Provider docs is wrong. 
    Current: pip install google-genai composio_google
    Correct: pip install google-genai composio_gemini

    2. On the executing tools section of googlecalendar using Google (python), there is the a similar problem.
    I tried the default code to get a response of What can you do with Googlecalendar? and I got errors. Replaced composio_google with composio_gemini and GoogleProvider with GeminiProvider and started working finally.
    Then I started getting a weird response from the LLM which said: text="I am sorry, I cannot fulfill this request. There seems to be an issue with the API. Please try again later."

    The error in the response object said: 'error': 'Subscripted generics cannot be used with class and instance checks'

    I got this error while trying to add data to a google sheet. I was able to create them without any issues however. 

    Switched projects after this because of suggestions from Sujay and there was no need for google sheets in that project.


    Then I tried using the Google Docs tools with GeminiProvider to create a doc with some text. Worked perfectly. Then I tried to update some text in an existing document. Provided the doc name and ID inside the prompt itself, but no matter what I did, I was always getting a response saying that a new doc has been created with the given data.


Day 2:
    Initializing:
    Create a github repository and pushed the project structure.
    I am using a hybrid approach of python and JS. Python for handling the GeminiProvider chats.
    JS for the front end and node.JS/express.js for the server


    Creating Utility Functions:
    After I used the Google doc tools succesfully yesterday, creating the createGoogleDoc and extractResume functions were very easy as the only thing changing was the prompt and the toolkit being passed.
    

Day 3:
    Creating the main resumeHandling logic:
    Created utility functions like: cleanLLMJson to remove extra characters added by gemini in the json string
                                    extractResume to get the candidate details which is converted to a valid dictionary format using the other utility functions
                                    generateQuestions which sends a prompt to the LLM with the candidate details dictionary to generate relevant questions.
                                    generateReport which uses the questions and the candidate dictionary to generate the report
                                    generateGoogleDoc which creates the google document from the generated report.

    All the functions using the LLM have the same structure. Only the prompt and the tools differ, so there was no difficulty in making these.

    Created a simple logic that does all these steps in logical succession while handling exceptions.

    Settings up the server and frontend(JS):
    Copied the same server and frontend from the first project and edited them to match the current project.

    Setting up resume upload:
    Used multer to save the files temporarily to the uploads/ folder. 
    Created the logic for uploading the files on clicking the upload button.

    Used Multer to spawn python resumehandling logic


Day 4:
    I missed the structure I had to follow in the brief. So then I restructured all the required tools into tools.py, created the agent class. Created the main.py logic. All this was mostly copy paste with a few changes.
    Deleted the DBs and the server and all the JS/node files


Day 5:
    Created the email sending logic. I tried sending the mail by just passing the prompt to gemini provider but it ended up just creating the draft. Even after specifying properly in the prompt it resonded that it doesn't have that 
    functionality available. Maybe this is a safety measure to prevent sending any inappropriately generated email directly.
    Then implemented this step directly by composio.tools.execute()

    Created the auth_config.py file which would create the auth configs with the required specifications and print the IDs on the screen for the user to paste into the env file.

    Was running into some occasional errors which said this service is unavailable right now. Please try again later. These errors were thrown by gemini provider. The tools would work as expected when retrying after some time.

Day 6:
    Integrated uv into the project and installed all the dependencies in it. I didn't freeze pip to get requirements
    with exact versions and installed every latest package. This broke the code. When trying to create the google document, response.text was returning as None.
    I tried printing the entire reponse and I got this:
    {'successful': True, 'response': GenerateContentResponse(
  automatic_function_calling_history=[],
  candidates=[
    Candidate(
      avg_logprobs=-0.00019631794718808905,
      content=Content(
        parts=[
          Part(
            function_call=FunctionCall(
              args=<... Max depth ...>,
              name=<... Max depth ...>
            )
          ),
        ],
        role='model'
      ),
      finish_reason=<FinishReason.STOP: 'STOP'>
    ),
  ],
  model_version='gemini-2.0-flash',
  response_id='o_LbaNGnCf-32roPxbmi0Qs',
  sdk_http_response=HttpResponse(
    headers=<dict len=11>
  ),
  usage_metadata=GenerateContentResponseUsageMetadata(
    candidates_token_count=215,
    candidates_tokens_details=[
      ModalityTokenCount(
        modality=<MediaModality.TEXT: 'TEXT'>,
        token_count=215
      ),
    ],
    prompt_token_count=1825,
    prompt_tokens_details=[
      ModalityTokenCount(
        modality=<MediaModality.TEXT: 'TEXT'>,
        token_count=1825
      ),
    ],
    total_token_count=2040
  )
)}

.text was returning None and even though this object shows successful as true, the document was not created.

These were the versions in the new env:
composio==0.8.19
composio-client==1.10.0
composio-gemini==0.8.19

I reverted back to my old venv with:
composio==0.8.15
composio-client==1.9.1
composio-gemini==0.8.13

The project started working properly again. 

I just locked uv with the old requirements. 











    


    





